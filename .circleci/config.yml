version: 2
jobs:
  build:
    docker:
      - image: circleci/openjdk:8-jdk

    steps:
      - checkout
      - restore_cache:
          key: kafka-to-s3-{{ checksum "build.gradle.kts" }}

      - run: ./gradlew build

      - save_cache:
          key: kafka-to-s3-{{ checksum "build.gradle.kts" }}
          paths:
            - .gradle

      - run: |
          ./gradlew distTar
          gzip -9 build/distributions/*.tar

      - store_artifacts:
          path: build/distributions
          destination: distributions

      - run:
          name: prepare release
          command: |
            mkdir artifacts
            cp README.md artifacts

      - persist_to_workspace:
           root: artifacts
           paths:
            - README.md

  test:
    docker:
      - image: circleci/python:3.7.3
    steps:
      - checkout
      - setup_remote_docker:
          # Attempt to enable DLC - if it's not enabled at an org level this will do nothing
          docker_layer_caching: true

        # Do not user the docker compose override to prevent invalid bind mounts
      - run: sudo pip3 install docker-compose
      - run: docker build --tag dwp-python-preinstall:latest --file ./python.preinstall.Dockerfile .
      - run: docker-compose -f docker-compose.yml up --build -d
      - run: docker-compose -f docker-compose.yml run --name integration-test integration-test ./gradlew integration

        # Store the test results from inside the container
      - run: docker cp integration-test:/kafka2s3/build/test-results .
      - store_test_results:
          path: test-results
      - store_artifacts:
          path: test-results
          destination: test-results

  publish-github-release:
    docker:
      - image: cibuilds/github:0.10
    steps:
      - attach_workspace:
          at: ./artifacts
      - run:
          name: "Publish Release on GitHub"
          command: |
            set -u
            set +o pipefail
            LATEST_VERSION=$(curl --silent "https://api.github.com/repos/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/releases/latest" | grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/')
            set -o pipefail
            [  -z "$LATEST_VERSION" ] && LATEST_VERSION="0.0.0"
            VERSION=$(echo $LATEST_VERSION | awk -F. '{$NF = $NF + 1;} 1' | sed 's/ /./g')
            echo "ghr -t GITHUB_TOKEN -u ${CIRCLE_PROJECT_USERNAME} -r ${CIRCLE_PROJECT_REPONAME} -c ${CIRCLE_SHA1} -delete ${VERSION} ./artifacts/"
            ghr -t ${GITHUB_TOKEN} -u ${CIRCLE_PROJECT_USERNAME} -r ${CIRCLE_PROJECT_REPONAME} -c ${CIRCLE_SHA1} -delete ${VERSION} ./artifacts/

workflows:
  version: 2
  "build & test":
    jobs:
      - build
      - test
      - publish-github-release:
          requires:
            - build
            - test
          filters:
            branches:
              only: master
